//
//  exploit_xi.swift  ‚Äì  k√ºt√ºphane bi√ßimi
//
import Foundation

enum ReadExploit {
    /// TCC /*bookmark-free*/  yeniden-eri≈üim PoC‚Äôsi.
    static func run(path: String) {
        let url        = URL(fileURLWithPath: path)
        let pid        = getpid()
        let sandboxed  = ProcessInfo.processInfo.environment["APP_SANDBOX_CONTAINER_ID"] != nil

        print("""
        üö® ReadExploit started
          PID: \(pid)
          Path: \(url.path)
          Sandboxed: \(sandboxed ? "Yes" : "No")
        """)

        let result: String
        if FileManager.default.fileExists(atPath: url.path) {
            do {
                let data = try Data(contentsOf: url)
                print("‚úÖ Read success ‚Ä¢ \(data.count) bytes")
                result = "‚úÖ Success (\(data.count) bytes)"
            } catch {
                print("‚ùå Read failed: \(error.localizedDescription)")
                result = "‚ùå Denied (\(error.localizedDescription))"
            }
        } else {
            print("‚ùå File does not exist.")
            result = "‚ùå Missing"
        }

        // -- ŒûVault g√ºncelle
        let entry: [String: Any] = [
            "timestamp": ISO8601DateFormatter().string(from: .init()),
            "path":      path,
            "pid":       pid,
            "sandboxed": sandboxed,
            "result":    result
        ]

        let vaultURL = URL(fileURLWithPath: "./ŒûVault.json")
        var logArray = (try? Data(contentsOf: vaultURL))
            .flatMap { try? JSONSerialization.jsonObject(with: $0) as? [[String: Any]] } ?? []
        logArray.append(entry)

        if let data = try? JSONSerialization.data(withJSONObject: logArray, options: .prettyPrinted) {
            try? data.write(to: vaultURL)
        }
        print("üóÇ ŒûVault entry recorded.")
    }
}
