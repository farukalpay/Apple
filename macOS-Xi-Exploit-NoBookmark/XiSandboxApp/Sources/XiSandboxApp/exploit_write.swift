import Foundation

struct WriteExploit {
    /// Sandbox √ßapraz-yazma PoC‚Äôsi.
    static func run(path: String) {
        let url        = URL(fileURLWithPath: path)
        let pid        = getpid()
        let sandboxed  = ProcessInfo.processInfo.environment["APP_SANDBOX_CONTAINER_ID"] != nil

        print("""
        üö® WriteExploit started
          PID: \(pid)
          Path: \(url.path)
          Sandboxed: \(sandboxed ? "Yes" : "No")
        """)

        let payload = "Œû test write \(Date())".data(using: .utf8)!

        let result: String
        do {
            try payload.write(to: url)
            print("‚úÖ Write success: file overwritten or created")
            result = "‚úÖ Write success"
        } catch {
            print("‚ùå Write failed: \(error.localizedDescription)")
            result = "‚ùå Write failed (\(error.localizedDescription))"
        }

        // ---- ŒûVault.json g√ºncelle
        let entry: [String: Any] = [
            "timestamp": ISO8601DateFormatter().string(from: .init()),
            "path":      path,
            "pid":       pid,
            "sandboxed": sandboxed,
            "result":    result
        ]

        let vaultURL = URL(fileURLWithPath: "./ŒûVault.json")
        var logArray = (try? Data(contentsOf: vaultURL))
            .flatMap { try? JSONSerialization.jsonObject(with: $0) as? [[String: Any]] } ?? []
        logArray.append(entry)

        if let data = try? JSONSerialization.data(withJSONObject: logArray, options: .prettyPrinted) {
            try? data.write(to: vaultURL)
        }
        print("üóÇ ŒûVault entry recorded.")
    }
}
