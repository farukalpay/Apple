import Foundation

struct ΞExploit {
    static func attemptAccess(to path: String) {
        let url = URL(fileURLWithPath: path)
        let pid = ProcessInfo.processInfo.processIdentifier
        let sandboxed = ProcessInfo.processInfo.environment["APP_SANDBOX_CONTAINER_ID"] != nil

        print("🚨 ΞExploit PoC started")
        print("  PID: \(pid)")
        print("  Path: \(path)")
        print("  Sandboxed: \(sandboxed ? "Yes" : "No")")

        var result = ""
        if FileManager.default.fileExists(atPath: url.path) {
            do {
                let data = try Data(contentsOf: url)
                print("✅ Ξ minted: file read succeeded. Size: \(data.count) bytes")
                result = "✅ Success (\(data.count) bytes)"
            } catch {
                print("❌ Ξ failed: access denied. \(error.localizedDescription)")
                result = "❌ Denied (\(error.localizedDescription))"
            }
        } else {
            print("❌ File does not exist.")
            result = "❌ Missing"
        }

        // Log result to ΞVault.json
        let log: [String: Any] = [
            "timestamp": ISO8601DateFormatter().string(from: Date()),
            "path": path,
            "pid": pid,
            "sandboxed": sandboxed,
            "result": result
        ]

        let vaultURL = URL(fileURLWithPath: "./ΞVault.json")
        var logs = (try? Data(contentsOf: vaultURL))
            .flatMap { try? JSONSerialization.jsonObject(with: $0) as? [[String: Any]] } ?? []
        logs.append(log)

        if let updated = try? JSONSerialization.data(withJSONObject: logs, options: [.prettyPrinted]) {
            try? updated.write(to: vaultURL)
        }

        print("🗂 ΞVault entry recorded.")
    }
}

let args = CommandLine.arguments
guard args.count == 2 else {
    print("Usage: ./exploit_xi <path-to-target>")
    exit(1)
}

ΞExploit.attemptAccess(to: args[1])
