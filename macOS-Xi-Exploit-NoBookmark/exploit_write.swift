import Foundation

struct ΞWriteExploit {
    static func attemptWrite(to path: String) {
        let url = URL(fileURLWithPath: path)
        let pid = ProcessInfo.processInfo.processIdentifier
        let sandboxed = ProcessInfo.processInfo.environment["APP_SANDBOX_CONTAINER_ID"] != nil

        print("🚨 ΞWriteExploit started")
        print("  PID: \(pid)")
        print("  Path: \(url.path)")
        print("  Sandboxed: \(sandboxed ? "Yes" : "No")")

        let testData = "Ξ test write \(Date())".data(using: .utf8)!

        var result: String
        do {
            try testData.write(to: url)
            print("✅ Write success: file overwritten or created")
            result = "✅ Write success"
        } catch {
            print("❌ Write failed: \(error.localizedDescription)")
            result = "❌ Write failed (\(error.localizedDescription))"
        }

        // Log to ΞVault
        let log: [String: Any] = [
            "timestamp": ISO8601DateFormatter().string(from: Date()),
            "path": path,
            "pid": pid,
            "sandboxed": sandboxed,
            "result": result
        ]

        let vaultURL = URL(fileURLWithPath: "./ΞVault.json")
        var logs = (try? Data(contentsOf: vaultURL))
            .flatMap { try? JSONSerialization.jsonObject(with: $0) as? [[String: Any]] } ?? []
        logs.append(log)

        if let updated = try? JSONSerialization.data(withJSONObject: logs, options: [.prettyPrinted]) {
            try? updated.write(to: vaultURL)
        }

        print("🗂 ΞVault entry recorded.")
    }
}

// MARK: - Entry Point
let args = CommandLine.arguments
guard args.count == 2 else {
    print("Usage: ./exploit_write <path-to-file>")
    exit(1)
}

ΞWriteExploit.attemptWrite(to: args[1])
