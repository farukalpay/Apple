import Foundation

struct ΞPulseMonitor {
    static func scan(path: String, interval: UInt32 = 3) {
        print("ΞPulseMonitor activated")
        print("  Target path: \(path)")
        print("  PID: \(ProcessInfo.processInfo.processIdentifier)")
        print("  SIP status: \(checkSIP() ? "🛡 Enabled" : "⚠️ Disabled")")
        print("  Sandbox: \(isSandboxed() ? "🔒 Yes" : "🔓 No")")
        print("  Begin monitoring Ξ-pulse...\n")

        while true {
            print("⏱ \(Date())")
            if FileManager.default.fileExists(atPath: path) {
                do {
                    let data = try Data(contentsOf: URL(fileURLWithPath: path))
                    print("✅ Ξ minted [\(data.count) bytes]")
                } catch {
                    print("❌ Ξ blocked: \(error.localizedDescription)")
                }
            } else {
                print("❌ File missing.")
            }
            sleep(interval)
        }
    }

    static func isSandboxed() -> Bool {
        return ProcessInfo.processInfo.environment["APP_SANDBOX_CONTAINER_ID"] != nil
    }

    static func checkSIP() -> Bool {
        let pipe = Pipe()
        let process = Process()
        process.launchPath = "/usr/bin/csrutil"
        process.arguments = ["status"]
        process.standardOutput = pipe
        do {
            try process.run()
        } catch {
            return false
        }
        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        let output = String(data: data, encoding: .utf8) ?? ""
        return output.contains("enabled")
    }
}

// MARK: - Entry

let args = CommandLine.arguments
guard args.count >= 2 else {
    print("Usage: ./ΞPulseMonitor <file-path> [interval-seconds]")
    exit(1)
}

let path = args[1]
let interval = args.count >= 3 ? UInt32(args[2]) ?? 3 : 3
ΞPulseMonitor.scan(path: path, interval: interval)
